Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    EXP_ALL

Grammar

Rule 0     S' -> expression
Rule 1     expression -> xor_expression OP_OR expression
Rule 2     expression -> xor_expression
Rule 3     xor_expression -> and_expression OP_XOR xor_expression
Rule 4     xor_expression -> and_expression
Rule 5     and_expression -> or_p_expression OP_AND and_expression
Rule 6     and_expression -> or_p_expression
Rule 7     or_p_expression -> xor_p_expression OP_OR_P or_p_expression
Rule 8     or_p_expression -> xor_p_expression
Rule 9     xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression
Rule 10    xor_p_expression -> and_p_expression
Rule 11    and_p_expression -> not_expression OP_AND_P and_p_expression
Rule 12    and_p_expression -> not_expression
Rule 13    not_expression -> OP_NOT ex_expression
Rule 14    not_expression -> ex_expression
Rule 15    ex_expression -> OP_EXISTS cmp_expression
Rule 16    ex_expression -> cmp_expression
Rule 17    cmp_expression -> term OP_LIKE cmp_expression
Rule 18    cmp_expression -> term OP_IN cmp_expression
Rule 19    cmp_expression -> term OP_IS cmp_expression
Rule 20    cmp_expression -> term OP_EQ cmp_expression
Rule 21    cmp_expression -> term OP_NE cmp_expression
Rule 22    cmp_expression -> term OP_GT cmp_expression
Rule 23    cmp_expression -> term OP_GE cmp_expression
Rule 24    cmp_expression -> term OP_LT cmp_expression
Rule 25    cmp_expression -> term OP_LE cmp_expression
Rule 26    cmp_expression -> term
Rule 27    term -> factor OP_PLUS term
Rule 28    term -> factor OP_MINUS term
Rule 29    term -> factor OP_TIMES term
Rule 30    term -> factor OP_DIVIDE term
Rule 31    term -> factor OP_MODULO term
Rule 32    term -> factor
Rule 33    factor -> IPV4
Rule 34    factor -> IPV6
Rule 35    factor -> INTEGER
Rule 36    factor -> FLOAT
Rule 37    factor -> VARIABLE
Rule 38    factor -> CONSTANT
Rule 39    factor -> LBRACK list RBRACK
Rule 40    factor -> LPAREN expression RPAREN
Rule 41    list -> IPV4
Rule 42    list -> IPV6
Rule 43    list -> INTEGER
Rule 44    list -> FLOAT
Rule 45    list -> VARIABLE
Rule 46    list -> CONSTANT
Rule 47    list -> IPV4 COMMA list
Rule 48    list -> IPV6 COMMA list
Rule 49    list -> INTEGER COMMA list
Rule 50    list -> FLOAT COMMA list
Rule 51    list -> VARIABLE COMMA list
Rule 52    list -> CONSTANT COMMA list

Terminals, with rules where they appear

COMMA                : 47 48 49 50 51 52
CONSTANT             : 38 46 52
EXP_ALL              : 
FLOAT                : 36 44 50
INTEGER              : 35 43 49
IPV4                 : 33 41 47
IPV6                 : 34 42 48
LBRACK               : 39
LPAREN               : 40
OP_AND               : 5
OP_AND_P             : 11
OP_DIVIDE            : 30
OP_EQ                : 20
OP_EXISTS            : 15
OP_GE                : 23
OP_GT                : 22
OP_IN                : 18
OP_IS                : 19
OP_LE                : 25
OP_LIKE              : 17
OP_LT                : 24
OP_MINUS             : 28
OP_MODULO            : 31
OP_NE                : 21
OP_NOT               : 13
OP_OR                : 1
OP_OR_P              : 7
OP_PLUS              : 27
OP_TIMES             : 29
OP_XOR               : 3
OP_XOR_P             : 9
RBRACK               : 39
RPAREN               : 40
VARIABLE             : 37 45 51
error                : 

Nonterminals, with rules where they appear

and_expression       : 3 4 5
and_p_expression     : 9 10 11
cmp_expression       : 15 16 17 18 19 20 21 22 23 24 25
ex_expression        : 13 14
expression           : 1 40 0
factor               : 27 28 29 30 31 32
list                 : 39 47 48 49 50 51 52
not_expression       : 11 12
or_p_expression      : 5 6 7
term                 : 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
xor_expression       : 1 2 3
xor_p_expression     : 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . xor_expression OP_OR expression
    (2) expression -> . xor_expression
    (3) xor_expression -> . and_expression OP_XOR xor_expression
    (4) xor_expression -> . and_expression
    (5) and_expression -> . or_p_expression OP_AND and_expression
    (6) and_expression -> . or_p_expression
    (7) or_p_expression -> . xor_p_expression OP_OR_P or_p_expression
    (8) or_p_expression -> . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    expression                     shift and go to state 20
    factor                         shift and go to state 7
    cmp_expression                 shift and go to state 6
    ex_expression                  shift and go to state 10
    xor_expression                 shift and go to state 19
    xor_p_expression               shift and go to state 13
    or_p_expression                shift and go to state 16
    and_expression                 shift and go to state 5
    and_p_expression               shift and go to state 8

state 1

    (38) factor -> CONSTANT .

    OP_PLUS         reduce using rule 38 (factor -> CONSTANT .)
    OP_MINUS        reduce using rule 38 (factor -> CONSTANT .)
    OP_TIMES        reduce using rule 38 (factor -> CONSTANT .)
    OP_DIVIDE       reduce using rule 38 (factor -> CONSTANT .)
    OP_MODULO       reduce using rule 38 (factor -> CONSTANT .)
    OP_LIKE         reduce using rule 38 (factor -> CONSTANT .)
    OP_IN           reduce using rule 38 (factor -> CONSTANT .)
    OP_IS           reduce using rule 38 (factor -> CONSTANT .)
    OP_EQ           reduce using rule 38 (factor -> CONSTANT .)
    OP_NE           reduce using rule 38 (factor -> CONSTANT .)
    OP_GT           reduce using rule 38 (factor -> CONSTANT .)
    OP_GE           reduce using rule 38 (factor -> CONSTANT .)
    OP_LT           reduce using rule 38 (factor -> CONSTANT .)
    OP_LE           reduce using rule 38 (factor -> CONSTANT .)
    OP_AND_P        reduce using rule 38 (factor -> CONSTANT .)
    OP_XOR_P        reduce using rule 38 (factor -> CONSTANT .)
    OP_OR_P         reduce using rule 38 (factor -> CONSTANT .)
    OP_AND          reduce using rule 38 (factor -> CONSTANT .)
    OP_XOR          reduce using rule 38 (factor -> CONSTANT .)
    OP_OR           reduce using rule 38 (factor -> CONSTANT .)
    $end            reduce using rule 38 (factor -> CONSTANT .)
    RPAREN          reduce using rule 38 (factor -> CONSTANT .)


state 2

    (37) factor -> VARIABLE .

    OP_PLUS         reduce using rule 37 (factor -> VARIABLE .)
    OP_MINUS        reduce using rule 37 (factor -> VARIABLE .)
    OP_TIMES        reduce using rule 37 (factor -> VARIABLE .)
    OP_DIVIDE       reduce using rule 37 (factor -> VARIABLE .)
    OP_MODULO       reduce using rule 37 (factor -> VARIABLE .)
    OP_LIKE         reduce using rule 37 (factor -> VARIABLE .)
    OP_IN           reduce using rule 37 (factor -> VARIABLE .)
    OP_IS           reduce using rule 37 (factor -> VARIABLE .)
    OP_EQ           reduce using rule 37 (factor -> VARIABLE .)
    OP_NE           reduce using rule 37 (factor -> VARIABLE .)
    OP_GT           reduce using rule 37 (factor -> VARIABLE .)
    OP_GE           reduce using rule 37 (factor -> VARIABLE .)
    OP_LT           reduce using rule 37 (factor -> VARIABLE .)
    OP_LE           reduce using rule 37 (factor -> VARIABLE .)
    OP_AND_P        reduce using rule 37 (factor -> VARIABLE .)
    OP_XOR_P        reduce using rule 37 (factor -> VARIABLE .)
    OP_OR_P         reduce using rule 37 (factor -> VARIABLE .)
    OP_AND          reduce using rule 37 (factor -> VARIABLE .)
    OP_XOR          reduce using rule 37 (factor -> VARIABLE .)
    OP_OR           reduce using rule 37 (factor -> VARIABLE .)
    $end            reduce using rule 37 (factor -> VARIABLE .)
    RPAREN          reduce using rule 37 (factor -> VARIABLE .)


state 3

    (13) not_expression -> OP_NOT . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    ex_expression                  shift and go to state 22
    cmp_expression                 shift and go to state 6
    factor                         shift and go to state 7

state 4

    (34) factor -> IPV6 .

    OP_PLUS         reduce using rule 34 (factor -> IPV6 .)
    OP_MINUS        reduce using rule 34 (factor -> IPV6 .)
    OP_TIMES        reduce using rule 34 (factor -> IPV6 .)
    OP_DIVIDE       reduce using rule 34 (factor -> IPV6 .)
    OP_MODULO       reduce using rule 34 (factor -> IPV6 .)
    OP_LIKE         reduce using rule 34 (factor -> IPV6 .)
    OP_IN           reduce using rule 34 (factor -> IPV6 .)
    OP_IS           reduce using rule 34 (factor -> IPV6 .)
    OP_EQ           reduce using rule 34 (factor -> IPV6 .)
    OP_NE           reduce using rule 34 (factor -> IPV6 .)
    OP_GT           reduce using rule 34 (factor -> IPV6 .)
    OP_GE           reduce using rule 34 (factor -> IPV6 .)
    OP_LT           reduce using rule 34 (factor -> IPV6 .)
    OP_LE           reduce using rule 34 (factor -> IPV6 .)
    OP_AND_P        reduce using rule 34 (factor -> IPV6 .)
    OP_XOR_P        reduce using rule 34 (factor -> IPV6 .)
    OP_OR_P         reduce using rule 34 (factor -> IPV6 .)
    OP_AND          reduce using rule 34 (factor -> IPV6 .)
    OP_XOR          reduce using rule 34 (factor -> IPV6 .)
    OP_OR           reduce using rule 34 (factor -> IPV6 .)
    $end            reduce using rule 34 (factor -> IPV6 .)
    RPAREN          reduce using rule 34 (factor -> IPV6 .)


state 5

    (3) xor_expression -> and_expression . OP_XOR xor_expression
    (4) xor_expression -> and_expression .

    OP_XOR          shift and go to state 23
    OP_OR           reduce using rule 4 (xor_expression -> and_expression .)
    RPAREN          reduce using rule 4 (xor_expression -> and_expression .)
    $end            reduce using rule 4 (xor_expression -> and_expression .)


state 6

    (16) ex_expression -> cmp_expression .

    OP_AND_P        reduce using rule 16 (ex_expression -> cmp_expression .)
    OP_XOR_P        reduce using rule 16 (ex_expression -> cmp_expression .)
    OP_OR_P         reduce using rule 16 (ex_expression -> cmp_expression .)
    OP_AND          reduce using rule 16 (ex_expression -> cmp_expression .)
    OP_XOR          reduce using rule 16 (ex_expression -> cmp_expression .)
    OP_OR           reduce using rule 16 (ex_expression -> cmp_expression .)
    RPAREN          reduce using rule 16 (ex_expression -> cmp_expression .)
    $end            reduce using rule 16 (ex_expression -> cmp_expression .)


state 7

    (27) term -> factor . OP_PLUS term
    (28) term -> factor . OP_MINUS term
    (29) term -> factor . OP_TIMES term
    (30) term -> factor . OP_DIVIDE term
    (31) term -> factor . OP_MODULO term
    (32) term -> factor .

    OP_PLUS         shift and go to state 28
    OP_MINUS        shift and go to state 25
    OP_TIMES        shift and go to state 26
    OP_DIVIDE       shift and go to state 27
    OP_MODULO       shift and go to state 24
    OP_LIKE         reduce using rule 32 (term -> factor .)
    OP_IN           reduce using rule 32 (term -> factor .)
    OP_IS           reduce using rule 32 (term -> factor .)
    OP_EQ           reduce using rule 32 (term -> factor .)
    OP_NE           reduce using rule 32 (term -> factor .)
    OP_GT           reduce using rule 32 (term -> factor .)
    OP_GE           reduce using rule 32 (term -> factor .)
    OP_LT           reduce using rule 32 (term -> factor .)
    OP_LE           reduce using rule 32 (term -> factor .)
    OP_AND_P        reduce using rule 32 (term -> factor .)
    OP_XOR_P        reduce using rule 32 (term -> factor .)
    OP_OR_P         reduce using rule 32 (term -> factor .)
    OP_AND          reduce using rule 32 (term -> factor .)
    OP_XOR          reduce using rule 32 (term -> factor .)
    OP_OR           reduce using rule 32 (term -> factor .)
    $end            reduce using rule 32 (term -> factor .)
    RPAREN          reduce using rule 32 (term -> factor .)


state 8

    (9) xor_p_expression -> and_p_expression . OP_XOR_P xor_p_expression
    (10) xor_p_expression -> and_p_expression .

    OP_XOR_P        shift and go to state 29
    OP_OR_P         reduce using rule 10 (xor_p_expression -> and_p_expression .)
    OP_AND          reduce using rule 10 (xor_p_expression -> and_p_expression .)
    OP_XOR          reduce using rule 10 (xor_p_expression -> and_p_expression .)
    OP_OR           reduce using rule 10 (xor_p_expression -> and_p_expression .)
    $end            reduce using rule 10 (xor_p_expression -> and_p_expression .)
    RPAREN          reduce using rule 10 (xor_p_expression -> and_p_expression .)


state 9

    (15) ex_expression -> OP_EXISTS . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 30
    factor                         shift and go to state 7

state 10

    (14) not_expression -> ex_expression .

    OP_AND_P        reduce using rule 14 (not_expression -> ex_expression .)
    OP_XOR_P        reduce using rule 14 (not_expression -> ex_expression .)
    OP_OR_P         reduce using rule 14 (not_expression -> ex_expression .)
    OP_AND          reduce using rule 14 (not_expression -> ex_expression .)
    OP_XOR          reduce using rule 14 (not_expression -> ex_expression .)
    OP_OR           reduce using rule 14 (not_expression -> ex_expression .)
    $end            reduce using rule 14 (not_expression -> ex_expression .)
    RPAREN          reduce using rule 14 (not_expression -> ex_expression .)


state 11

    (40) factor -> LPAREN . expression RPAREN
    (1) expression -> . xor_expression OP_OR expression
    (2) expression -> . xor_expression
    (3) xor_expression -> . and_expression OP_XOR xor_expression
    (4) xor_expression -> . and_expression
    (5) and_expression -> . or_p_expression OP_AND and_expression
    (6) and_expression -> . or_p_expression
    (7) or_p_expression -> . xor_p_expression OP_OR_P or_p_expression
    (8) or_p_expression -> . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    expression                     shift and go to state 31
    factor                         shift and go to state 7
    cmp_expression                 shift and go to state 6
    ex_expression                  shift and go to state 10
    xor_expression                 shift and go to state 19
    xor_p_expression               shift and go to state 13
    or_p_expression                shift and go to state 16
    and_expression                 shift and go to state 5
    and_p_expression               shift and go to state 8

state 12

    (35) factor -> INTEGER .

    OP_PLUS         reduce using rule 35 (factor -> INTEGER .)
    OP_MINUS        reduce using rule 35 (factor -> INTEGER .)
    OP_TIMES        reduce using rule 35 (factor -> INTEGER .)
    OP_DIVIDE       reduce using rule 35 (factor -> INTEGER .)
    OP_MODULO       reduce using rule 35 (factor -> INTEGER .)
    OP_LIKE         reduce using rule 35 (factor -> INTEGER .)
    OP_IN           reduce using rule 35 (factor -> INTEGER .)
    OP_IS           reduce using rule 35 (factor -> INTEGER .)
    OP_EQ           reduce using rule 35 (factor -> INTEGER .)
    OP_NE           reduce using rule 35 (factor -> INTEGER .)
    OP_GT           reduce using rule 35 (factor -> INTEGER .)
    OP_GE           reduce using rule 35 (factor -> INTEGER .)
    OP_LT           reduce using rule 35 (factor -> INTEGER .)
    OP_LE           reduce using rule 35 (factor -> INTEGER .)
    OP_AND_P        reduce using rule 35 (factor -> INTEGER .)
    OP_XOR_P        reduce using rule 35 (factor -> INTEGER .)
    OP_OR_P         reduce using rule 35 (factor -> INTEGER .)
    OP_AND          reduce using rule 35 (factor -> INTEGER .)
    OP_XOR          reduce using rule 35 (factor -> INTEGER .)
    OP_OR           reduce using rule 35 (factor -> INTEGER .)
    $end            reduce using rule 35 (factor -> INTEGER .)
    RPAREN          reduce using rule 35 (factor -> INTEGER .)


state 13

    (7) or_p_expression -> xor_p_expression . OP_OR_P or_p_expression
    (8) or_p_expression -> xor_p_expression .

    OP_OR_P         shift and go to state 32
    OP_AND          reduce using rule 8 (or_p_expression -> xor_p_expression .)
    OP_XOR          reduce using rule 8 (or_p_expression -> xor_p_expression .)
    OP_OR           reduce using rule 8 (or_p_expression -> xor_p_expression .)
    $end            reduce using rule 8 (or_p_expression -> xor_p_expression .)
    RPAREN          reduce using rule 8 (or_p_expression -> xor_p_expression .)


state 14

    (17) cmp_expression -> term . OP_LIKE cmp_expression
    (18) cmp_expression -> term . OP_IN cmp_expression
    (19) cmp_expression -> term . OP_IS cmp_expression
    (20) cmp_expression -> term . OP_EQ cmp_expression
    (21) cmp_expression -> term . OP_NE cmp_expression
    (22) cmp_expression -> term . OP_GT cmp_expression
    (23) cmp_expression -> term . OP_GE cmp_expression
    (24) cmp_expression -> term . OP_LT cmp_expression
    (25) cmp_expression -> term . OP_LE cmp_expression
    (26) cmp_expression -> term .

    OP_LIKE         shift and go to state 41
    OP_IN           shift and go to state 38
    OP_IS           shift and go to state 34
    OP_EQ           shift and go to state 33
    OP_NE           shift and go to state 36
    OP_GT           shift and go to state 35
    OP_GE           shift and go to state 40
    OP_LT           shift and go to state 37
    OP_LE           shift and go to state 39
    OP_AND_P        reduce using rule 26 (cmp_expression -> term .)
    OP_XOR_P        reduce using rule 26 (cmp_expression -> term .)
    OP_OR_P         reduce using rule 26 (cmp_expression -> term .)
    OP_AND          reduce using rule 26 (cmp_expression -> term .)
    OP_XOR          reduce using rule 26 (cmp_expression -> term .)
    OP_OR           reduce using rule 26 (cmp_expression -> term .)
    $end            reduce using rule 26 (cmp_expression -> term .)
    RPAREN          reduce using rule 26 (cmp_expression -> term .)


state 15

    (11) and_p_expression -> not_expression . OP_AND_P and_p_expression
    (12) and_p_expression -> not_expression .

    OP_AND_P        shift and go to state 42
    OP_XOR_P        reduce using rule 12 (and_p_expression -> not_expression .)
    OP_OR_P         reduce using rule 12 (and_p_expression -> not_expression .)
    OP_AND          reduce using rule 12 (and_p_expression -> not_expression .)
    OP_XOR          reduce using rule 12 (and_p_expression -> not_expression .)
    OP_OR           reduce using rule 12 (and_p_expression -> not_expression .)
    $end            reduce using rule 12 (and_p_expression -> not_expression .)
    RPAREN          reduce using rule 12 (and_p_expression -> not_expression .)


state 16

    (5) and_expression -> or_p_expression . OP_AND and_expression
    (6) and_expression -> or_p_expression .

    OP_AND          shift and go to state 43
    OP_XOR          reduce using rule 6 (and_expression -> or_p_expression .)
    OP_OR           reduce using rule 6 (and_expression -> or_p_expression .)
    RPAREN          reduce using rule 6 (and_expression -> or_p_expression .)
    $end            reduce using rule 6 (and_expression -> or_p_expression .)


state 17

    (36) factor -> FLOAT .

    OP_PLUS         reduce using rule 36 (factor -> FLOAT .)
    OP_MINUS        reduce using rule 36 (factor -> FLOAT .)
    OP_TIMES        reduce using rule 36 (factor -> FLOAT .)
    OP_DIVIDE       reduce using rule 36 (factor -> FLOAT .)
    OP_MODULO       reduce using rule 36 (factor -> FLOAT .)
    OP_LIKE         reduce using rule 36 (factor -> FLOAT .)
    OP_IN           reduce using rule 36 (factor -> FLOAT .)
    OP_IS           reduce using rule 36 (factor -> FLOAT .)
    OP_EQ           reduce using rule 36 (factor -> FLOAT .)
    OP_NE           reduce using rule 36 (factor -> FLOAT .)
    OP_GT           reduce using rule 36 (factor -> FLOAT .)
    OP_GE           reduce using rule 36 (factor -> FLOAT .)
    OP_LT           reduce using rule 36 (factor -> FLOAT .)
    OP_LE           reduce using rule 36 (factor -> FLOAT .)
    OP_AND_P        reduce using rule 36 (factor -> FLOAT .)
    OP_XOR_P        reduce using rule 36 (factor -> FLOAT .)
    OP_OR_P         reduce using rule 36 (factor -> FLOAT .)
    OP_AND          reduce using rule 36 (factor -> FLOAT .)
    OP_XOR          reduce using rule 36 (factor -> FLOAT .)
    OP_OR           reduce using rule 36 (factor -> FLOAT .)
    $end            reduce using rule 36 (factor -> FLOAT .)
    RPAREN          reduce using rule 36 (factor -> FLOAT .)


state 18

    (39) factor -> LBRACK . list RBRACK
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 46

state 19

    (1) expression -> xor_expression . OP_OR expression
    (2) expression -> xor_expression .

    OP_OR           shift and go to state 51
    $end            reduce using rule 2 (expression -> xor_expression .)
    RPAREN          reduce using rule 2 (expression -> xor_expression .)


state 20

    (0) S' -> expression .



state 21

    (33) factor -> IPV4 .

    OP_PLUS         reduce using rule 33 (factor -> IPV4 .)
    OP_MINUS        reduce using rule 33 (factor -> IPV4 .)
    OP_TIMES        reduce using rule 33 (factor -> IPV4 .)
    OP_DIVIDE       reduce using rule 33 (factor -> IPV4 .)
    OP_MODULO       reduce using rule 33 (factor -> IPV4 .)
    OP_LIKE         reduce using rule 33 (factor -> IPV4 .)
    OP_IN           reduce using rule 33 (factor -> IPV4 .)
    OP_IS           reduce using rule 33 (factor -> IPV4 .)
    OP_EQ           reduce using rule 33 (factor -> IPV4 .)
    OP_NE           reduce using rule 33 (factor -> IPV4 .)
    OP_GT           reduce using rule 33 (factor -> IPV4 .)
    OP_GE           reduce using rule 33 (factor -> IPV4 .)
    OP_LT           reduce using rule 33 (factor -> IPV4 .)
    OP_LE           reduce using rule 33 (factor -> IPV4 .)
    OP_AND_P        reduce using rule 33 (factor -> IPV4 .)
    OP_XOR_P        reduce using rule 33 (factor -> IPV4 .)
    OP_OR_P         reduce using rule 33 (factor -> IPV4 .)
    OP_AND          reduce using rule 33 (factor -> IPV4 .)
    OP_XOR          reduce using rule 33 (factor -> IPV4 .)
    OP_OR           reduce using rule 33 (factor -> IPV4 .)
    $end            reduce using rule 33 (factor -> IPV4 .)
    RPAREN          reduce using rule 33 (factor -> IPV4 .)


state 22

    (13) not_expression -> OP_NOT ex_expression .

    OP_AND_P        reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    OP_XOR_P        reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    OP_OR_P         reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    OP_AND          reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    OP_XOR          reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    OP_OR           reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    $end            reduce using rule 13 (not_expression -> OP_NOT ex_expression .)
    RPAREN          reduce using rule 13 (not_expression -> OP_NOT ex_expression .)


state 23

    (3) xor_expression -> and_expression OP_XOR . xor_expression
    (3) xor_expression -> . and_expression OP_XOR xor_expression
    (4) xor_expression -> . and_expression
    (5) and_expression -> . or_p_expression OP_AND and_expression
    (6) and_expression -> . or_p_expression
    (7) or_p_expression -> . xor_p_expression OP_OR_P or_p_expression
    (8) or_p_expression -> . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    ex_expression                  shift and go to state 10
    cmp_expression                 shift and go to state 6
    factor                         shift and go to state 7
    xor_expression                 shift and go to state 52
    xor_p_expression               shift and go to state 13
    or_p_expression                shift and go to state 16
    and_expression                 shift and go to state 5
    and_p_expression               shift and go to state 8

state 24

    (31) term -> factor OP_MODULO . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 53
    factor                         shift and go to state 7

state 25

    (28) term -> factor OP_MINUS . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 54
    factor                         shift and go to state 7

state 26

    (29) term -> factor OP_TIMES . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 55
    factor                         shift and go to state 7

state 27

    (30) term -> factor OP_DIVIDE . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 56
    factor                         shift and go to state 7

state 28

    (27) term -> factor OP_PLUS . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 57
    factor                         shift and go to state 7

state 29

    (9) xor_p_expression -> and_p_expression OP_XOR_P . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    ex_expression                  shift and go to state 10
    cmp_expression                 shift and go to state 6
    factor                         shift and go to state 7
    xor_p_expression               shift and go to state 58
    and_p_expression               shift and go to state 8

state 30

    (15) ex_expression -> OP_EXISTS cmp_expression .

    OP_AND_P        reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    OP_XOR_P        reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    OP_OR_P         reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    OP_AND          reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    OP_XOR          reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    OP_OR           reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    RPAREN          reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)
    $end            reduce using rule 15 (ex_expression -> OP_EXISTS cmp_expression .)


state 31

    (40) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 59


state 32

    (7) or_p_expression -> xor_p_expression OP_OR_P . or_p_expression
    (7) or_p_expression -> . xor_p_expression OP_OR_P or_p_expression
    (8) or_p_expression -> . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    ex_expression                  shift and go to state 10
    cmp_expression                 shift and go to state 6
    factor                         shift and go to state 7
    xor_p_expression               shift and go to state 13
    or_p_expression                shift and go to state 60
    and_p_expression               shift and go to state 8

state 33

    (20) cmp_expression -> term OP_EQ . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 61
    factor                         shift and go to state 7

state 34

    (19) cmp_expression -> term OP_IS . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 62
    factor                         shift and go to state 7

state 35

    (22) cmp_expression -> term OP_GT . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 63
    factor                         shift and go to state 7

state 36

    (21) cmp_expression -> term OP_NE . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 64
    factor                         shift and go to state 7

state 37

    (24) cmp_expression -> term OP_LT . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 65
    factor                         shift and go to state 7

state 38

    (18) cmp_expression -> term OP_IN . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 66
    factor                         shift and go to state 7

state 39

    (25) cmp_expression -> term OP_LE . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 67
    factor                         shift and go to state 7

state 40

    (23) cmp_expression -> term OP_GE . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 68
    factor                         shift and go to state 7

state 41

    (17) cmp_expression -> term OP_LIKE . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    cmp_expression                 shift and go to state 69
    factor                         shift and go to state 7

state 42

    (11) and_p_expression -> not_expression OP_AND_P . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    ex_expression                  shift and go to state 10
    cmp_expression                 shift and go to state 6
    factor                         shift and go to state 7
    and_p_expression               shift and go to state 70

state 43

    (5) and_expression -> or_p_expression OP_AND . and_expression
    (5) and_expression -> . or_p_expression OP_AND and_expression
    (6) and_expression -> . or_p_expression
    (7) or_p_expression -> . xor_p_expression OP_OR_P or_p_expression
    (8) or_p_expression -> . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    ex_expression                  shift and go to state 10
    cmp_expression                 shift and go to state 6
    factor                         shift and go to state 7
    xor_p_expression               shift and go to state 13
    or_p_expression                shift and go to state 16
    and_expression                 shift and go to state 71
    and_p_expression               shift and go to state 8

state 44

    (44) list -> FLOAT .
    (50) list -> FLOAT . COMMA list

    RBRACK          reduce using rule 44 (list -> FLOAT .)
    COMMA           shift and go to state 72


state 45

    (46) list -> CONSTANT .
    (52) list -> CONSTANT . COMMA list

    RBRACK          reduce using rule 46 (list -> CONSTANT .)
    COMMA           shift and go to state 73


state 46

    (39) factor -> LBRACK list . RBRACK

    RBRACK          shift and go to state 74


state 47

    (41) list -> IPV4 .
    (47) list -> IPV4 . COMMA list

    RBRACK          reduce using rule 41 (list -> IPV4 .)
    COMMA           shift and go to state 75


state 48

    (42) list -> IPV6 .
    (48) list -> IPV6 . COMMA list

    RBRACK          reduce using rule 42 (list -> IPV6 .)
    COMMA           shift and go to state 76


state 49

    (45) list -> VARIABLE .
    (51) list -> VARIABLE . COMMA list

    RBRACK          reduce using rule 45 (list -> VARIABLE .)
    COMMA           shift and go to state 77


state 50

    (43) list -> INTEGER .
    (49) list -> INTEGER . COMMA list

    RBRACK          reduce using rule 43 (list -> INTEGER .)
    COMMA           shift and go to state 78


state 51

    (1) expression -> xor_expression OP_OR . expression
    (1) expression -> . xor_expression OP_OR expression
    (2) expression -> . xor_expression
    (3) xor_expression -> . and_expression OP_XOR xor_expression
    (4) xor_expression -> . and_expression
    (5) and_expression -> . or_p_expression OP_AND and_expression
    (6) and_expression -> . or_p_expression
    (7) or_p_expression -> . xor_p_expression OP_OR_P or_p_expression
    (8) or_p_expression -> . xor_p_expression
    (9) xor_p_expression -> . and_p_expression OP_XOR_P xor_p_expression
    (10) xor_p_expression -> . and_p_expression
    (11) and_p_expression -> . not_expression OP_AND_P and_p_expression
    (12) and_p_expression -> . not_expression
    (13) not_expression -> . OP_NOT ex_expression
    (14) not_expression -> . ex_expression
    (15) ex_expression -> . OP_EXISTS cmp_expression
    (16) ex_expression -> . cmp_expression
    (17) cmp_expression -> . term OP_LIKE cmp_expression
    (18) cmp_expression -> . term OP_IN cmp_expression
    (19) cmp_expression -> . term OP_IS cmp_expression
    (20) cmp_expression -> . term OP_EQ cmp_expression
    (21) cmp_expression -> . term OP_NE cmp_expression
    (22) cmp_expression -> . term OP_GT cmp_expression
    (23) cmp_expression -> . term OP_GE cmp_expression
    (24) cmp_expression -> . term OP_LT cmp_expression
    (25) cmp_expression -> . term OP_LE cmp_expression
    (26) cmp_expression -> . term
    (27) term -> . factor OP_PLUS term
    (28) term -> . factor OP_MINUS term
    (29) term -> . factor OP_TIMES term
    (30) term -> . factor OP_DIVIDE term
    (31) term -> . factor OP_MODULO term
    (32) term -> . factor
    (33) factor -> . IPV4
    (34) factor -> . IPV6
    (35) factor -> . INTEGER
    (36) factor -> . FLOAT
    (37) factor -> . VARIABLE
    (38) factor -> . CONSTANT
    (39) factor -> . LBRACK list RBRACK
    (40) factor -> . LPAREN expression RPAREN

    OP_NOT          shift and go to state 3
    OP_EXISTS       shift and go to state 9
    IPV4            shift and go to state 21
    IPV6            shift and go to state 4
    INTEGER         shift and go to state 12
    FLOAT           shift and go to state 17
    VARIABLE        shift and go to state 2
    CONSTANT        shift and go to state 1
    LBRACK          shift and go to state 18
    LPAREN          shift and go to state 11

    term                           shift and go to state 14
    not_expression                 shift and go to state 15
    expression                     shift and go to state 79
    factor                         shift and go to state 7
    cmp_expression                 shift and go to state 6
    ex_expression                  shift and go to state 10
    xor_expression                 shift and go to state 19
    xor_p_expression               shift and go to state 13
    or_p_expression                shift and go to state 16
    and_expression                 shift and go to state 5
    and_p_expression               shift and go to state 8

state 52

    (3) xor_expression -> and_expression OP_XOR xor_expression .

    OP_OR           reduce using rule 3 (xor_expression -> and_expression OP_XOR xor_expression .)
    RPAREN          reduce using rule 3 (xor_expression -> and_expression OP_XOR xor_expression .)
    $end            reduce using rule 3 (xor_expression -> and_expression OP_XOR xor_expression .)


state 53

    (31) term -> factor OP_MODULO term .

    OP_LIKE         reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_IN           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_IS           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_EQ           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_NE           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_GT           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_GE           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_LT           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_LE           reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_AND_P        reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_XOR_P        reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_OR_P         reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_AND          reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_XOR          reduce using rule 31 (term -> factor OP_MODULO term .)
    OP_OR           reduce using rule 31 (term -> factor OP_MODULO term .)
    $end            reduce using rule 31 (term -> factor OP_MODULO term .)
    RPAREN          reduce using rule 31 (term -> factor OP_MODULO term .)


state 54

    (28) term -> factor OP_MINUS term .

    OP_LIKE         reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_IN           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_IS           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_EQ           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_NE           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_GT           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_GE           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_LT           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_LE           reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_AND_P        reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_XOR_P        reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_OR_P         reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_AND          reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_XOR          reduce using rule 28 (term -> factor OP_MINUS term .)
    OP_OR           reduce using rule 28 (term -> factor OP_MINUS term .)
    $end            reduce using rule 28 (term -> factor OP_MINUS term .)
    RPAREN          reduce using rule 28 (term -> factor OP_MINUS term .)


state 55

    (29) term -> factor OP_TIMES term .

    OP_LIKE         reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_IN           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_IS           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_EQ           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_NE           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_GT           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_GE           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_LT           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_LE           reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_AND_P        reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_XOR_P        reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_OR_P         reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_AND          reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_XOR          reduce using rule 29 (term -> factor OP_TIMES term .)
    OP_OR           reduce using rule 29 (term -> factor OP_TIMES term .)
    $end            reduce using rule 29 (term -> factor OP_TIMES term .)
    RPAREN          reduce using rule 29 (term -> factor OP_TIMES term .)


state 56

    (30) term -> factor OP_DIVIDE term .

    OP_LIKE         reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_IN           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_IS           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_EQ           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_NE           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_GT           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_GE           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_LT           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_LE           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_AND_P        reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_XOR_P        reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_OR_P         reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_AND          reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_XOR          reduce using rule 30 (term -> factor OP_DIVIDE term .)
    OP_OR           reduce using rule 30 (term -> factor OP_DIVIDE term .)
    $end            reduce using rule 30 (term -> factor OP_DIVIDE term .)
    RPAREN          reduce using rule 30 (term -> factor OP_DIVIDE term .)


state 57

    (27) term -> factor OP_PLUS term .

    OP_LIKE         reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_IN           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_IS           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_EQ           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_NE           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_GT           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_GE           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_LT           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_LE           reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_AND_P        reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_XOR_P        reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_OR_P         reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_AND          reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_XOR          reduce using rule 27 (term -> factor OP_PLUS term .)
    OP_OR           reduce using rule 27 (term -> factor OP_PLUS term .)
    $end            reduce using rule 27 (term -> factor OP_PLUS term .)
    RPAREN          reduce using rule 27 (term -> factor OP_PLUS term .)


state 58

    (9) xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .

    OP_OR_P         reduce using rule 9 (xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .)
    OP_AND          reduce using rule 9 (xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .)
    OP_XOR          reduce using rule 9 (xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .)
    OP_OR           reduce using rule 9 (xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .)
    $end            reduce using rule 9 (xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .)
    RPAREN          reduce using rule 9 (xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression .)


state 59

    (40) factor -> LPAREN expression RPAREN .

    OP_PLUS         reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_MINUS        reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_TIMES        reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_DIVIDE       reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_MODULO       reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_LIKE         reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_IN           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_IS           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_EQ           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_NE           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_GT           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_GE           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_LT           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_LE           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_AND_P        reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_XOR_P        reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_OR_P         reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_AND          reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_XOR          reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    OP_OR           reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 40 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 40 (factor -> LPAREN expression RPAREN .)


state 60

    (7) or_p_expression -> xor_p_expression OP_OR_P or_p_expression .

    OP_AND          reduce using rule 7 (or_p_expression -> xor_p_expression OP_OR_P or_p_expression .)
    OP_XOR          reduce using rule 7 (or_p_expression -> xor_p_expression OP_OR_P or_p_expression .)
    OP_OR           reduce using rule 7 (or_p_expression -> xor_p_expression OP_OR_P or_p_expression .)
    $end            reduce using rule 7 (or_p_expression -> xor_p_expression OP_OR_P or_p_expression .)
    RPAREN          reduce using rule 7 (or_p_expression -> xor_p_expression OP_OR_P or_p_expression .)


state 61

    (20) cmp_expression -> term OP_EQ cmp_expression .

    OP_AND_P        reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    OP_XOR_P        reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    OP_OR_P         reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    OP_AND          reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    OP_XOR          reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    OP_OR           reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    $end            reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)
    RPAREN          reduce using rule 20 (cmp_expression -> term OP_EQ cmp_expression .)


state 62

    (19) cmp_expression -> term OP_IS cmp_expression .

    OP_AND_P        reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    OP_XOR_P        reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    OP_OR_P         reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    OP_AND          reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    OP_XOR          reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    OP_OR           reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    $end            reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)
    RPAREN          reduce using rule 19 (cmp_expression -> term OP_IS cmp_expression .)


state 63

    (22) cmp_expression -> term OP_GT cmp_expression .

    OP_AND_P        reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    OP_XOR_P        reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    OP_OR_P         reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    OP_AND          reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    OP_XOR          reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    OP_OR           reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    $end            reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)
    RPAREN          reduce using rule 22 (cmp_expression -> term OP_GT cmp_expression .)


state 64

    (21) cmp_expression -> term OP_NE cmp_expression .

    OP_AND_P        reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    OP_XOR_P        reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    OP_OR_P         reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    OP_AND          reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    OP_XOR          reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    OP_OR           reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    $end            reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)
    RPAREN          reduce using rule 21 (cmp_expression -> term OP_NE cmp_expression .)


state 65

    (24) cmp_expression -> term OP_LT cmp_expression .

    OP_AND_P        reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    OP_XOR_P        reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    OP_OR_P         reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    OP_AND          reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    OP_XOR          reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    OP_OR           reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    $end            reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)
    RPAREN          reduce using rule 24 (cmp_expression -> term OP_LT cmp_expression .)


state 66

    (18) cmp_expression -> term OP_IN cmp_expression .

    OP_AND_P        reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    OP_XOR_P        reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    OP_OR_P         reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    OP_AND          reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    OP_XOR          reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    OP_OR           reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    $end            reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)
    RPAREN          reduce using rule 18 (cmp_expression -> term OP_IN cmp_expression .)


state 67

    (25) cmp_expression -> term OP_LE cmp_expression .

    OP_AND_P        reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    OP_XOR_P        reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    OP_OR_P         reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    OP_AND          reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    OP_XOR          reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    OP_OR           reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    $end            reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)
    RPAREN          reduce using rule 25 (cmp_expression -> term OP_LE cmp_expression .)


state 68

    (23) cmp_expression -> term OP_GE cmp_expression .

    OP_AND_P        reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    OP_XOR_P        reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    OP_OR_P         reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    OP_AND          reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    OP_XOR          reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    OP_OR           reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    $end            reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)
    RPAREN          reduce using rule 23 (cmp_expression -> term OP_GE cmp_expression .)


state 69

    (17) cmp_expression -> term OP_LIKE cmp_expression .

    OP_AND_P        reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    OP_XOR_P        reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    OP_OR_P         reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    OP_AND          reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    OP_XOR          reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    OP_OR           reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    $end            reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)
    RPAREN          reduce using rule 17 (cmp_expression -> term OP_LIKE cmp_expression .)


state 70

    (11) and_p_expression -> not_expression OP_AND_P and_p_expression .

    OP_XOR_P        reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)
    OP_OR_P         reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)
    OP_AND          reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)
    OP_XOR          reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)
    OP_OR           reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)
    $end            reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)
    RPAREN          reduce using rule 11 (and_p_expression -> not_expression OP_AND_P and_p_expression .)


state 71

    (5) and_expression -> or_p_expression OP_AND and_expression .

    OP_XOR          reduce using rule 5 (and_expression -> or_p_expression OP_AND and_expression .)
    OP_OR           reduce using rule 5 (and_expression -> or_p_expression OP_AND and_expression .)
    RPAREN          reduce using rule 5 (and_expression -> or_p_expression OP_AND and_expression .)
    $end            reduce using rule 5 (and_expression -> or_p_expression OP_AND and_expression .)


state 72

    (50) list -> FLOAT COMMA . list
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 80

state 73

    (52) list -> CONSTANT COMMA . list
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 81

state 74

    (39) factor -> LBRACK list RBRACK .

    OP_PLUS         reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_MINUS        reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_TIMES        reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_DIVIDE       reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_MODULO       reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_LIKE         reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_IN           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_IS           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_EQ           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_NE           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_GT           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_GE           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_LT           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_LE           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_AND_P        reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_XOR_P        reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_OR_P         reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_AND          reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_XOR          reduce using rule 39 (factor -> LBRACK list RBRACK .)
    OP_OR           reduce using rule 39 (factor -> LBRACK list RBRACK .)
    $end            reduce using rule 39 (factor -> LBRACK list RBRACK .)
    RPAREN          reduce using rule 39 (factor -> LBRACK list RBRACK .)


state 75

    (47) list -> IPV4 COMMA . list
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 82

state 76

    (48) list -> IPV6 COMMA . list
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 83

state 77

    (51) list -> VARIABLE COMMA . list
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 84

state 78

    (49) list -> INTEGER COMMA . list
    (41) list -> . IPV4
    (42) list -> . IPV6
    (43) list -> . INTEGER
    (44) list -> . FLOAT
    (45) list -> . VARIABLE
    (46) list -> . CONSTANT
    (47) list -> . IPV4 COMMA list
    (48) list -> . IPV6 COMMA list
    (49) list -> . INTEGER COMMA list
    (50) list -> . FLOAT COMMA list
    (51) list -> . VARIABLE COMMA list
    (52) list -> . CONSTANT COMMA list

    IPV4            shift and go to state 47
    IPV6            shift and go to state 48
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 44
    VARIABLE        shift and go to state 49
    CONSTANT        shift and go to state 45

    list                           shift and go to state 85

state 79

    (1) expression -> xor_expression OP_OR expression .

    $end            reduce using rule 1 (expression -> xor_expression OP_OR expression .)
    RPAREN          reduce using rule 1 (expression -> xor_expression OP_OR expression .)


state 80

    (50) list -> FLOAT COMMA list .

    RBRACK          reduce using rule 50 (list -> FLOAT COMMA list .)


state 81

    (52) list -> CONSTANT COMMA list .

    RBRACK          reduce using rule 52 (list -> CONSTANT COMMA list .)


state 82

    (47) list -> IPV4 COMMA list .

    RBRACK          reduce using rule 47 (list -> IPV4 COMMA list .)


state 83

    (48) list -> IPV6 COMMA list .

    RBRACK          reduce using rule 48 (list -> IPV6 COMMA list .)


state 84

    (51) list -> VARIABLE COMMA list .

    RBRACK          reduce using rule 51 (list -> VARIABLE COMMA list .)


state 85

    (49) list -> INTEGER COMMA list .

    RBRACK          reduce using rule 49 (list -> INTEGER COMMA list .)

